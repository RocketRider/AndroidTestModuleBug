apply plugin: 'com.android.test' // A plugin used for test-only-modules

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildTools

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion

        // Only include the 'flavor1' product flavor from the 'defaultDimension' flavor dimension
        missingDimensionStrategy 'defaultDimension', 'flavor1'

        // The package name of the test app
        testApplicationId 'com.example.android.testing.blueprint.test'
        // The Instrumentation test runner used to run tests.
        testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'

        multiDexEnabled true
    }

    applicationVariants.all { variant ->
        variant.mergeResources.doLast {
            delete fileTree("$buildDir/intermediates/res/merged/debug")
        }
    }

    // Set the target app project. The module specified here should contain the production code
    // test should run against.
    targetProjectPath ':app'
}

dependencies {
    implementation 'com.android.support:appcompat-v7:' + rootProject.ext.supportLibVersion

    // Android Testing Support Library's runner and rules and hamcrest matchers
    implementation 'com.android.support.test:runner:' + rootProject.ext.runnerVersion
    implementation 'com.android.support.test:rules:' + rootProject.ext.rulesVersion
    implementation 'org.hamcrest:hamcrest-core:' + rootProject.ext.hamcrestVersion
    implementation 'org.mockito:mockito-android:' + rootProject.ext.mockitoVersion

    implementation 'com.android.support.test:runner:' + rootProject.ext.runnerVersion
    implementation 'com.android.support.test:rules:' + rootProject.ext.rulesVersion

    // Espresso UI Testing
    implementation 'com.android.support.test.espresso:espresso-core:' + rootProject.ext.espressoVersion
}
